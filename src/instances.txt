INSERT
---------------------------------------------------------------------------------------------------
Method 1:
    $query = new Sql\InsertInto('Product');
    $query->title = 'shoes';
    $query->price = 10.99;
    $query->name = 'FooBar';
    $query->commit();

Method 2:
    $query = new Sql\InsertInto('Product');
	$query->values(array(
    	'title' => 'Shoes',
        'price'	=> 10.99,
        'name'	=> 'FooBar'
    ))->commit();
      
Method 3:
    $query = new Sql\InsertInto('Product');
	$query->column('title', 'price', 'name')
		  ->values('Shoes', 10.99, 'FooBar')
          ->commit();
          
Method 4:
	$query = new Sql\InsertInto('Product');
	$query->column(['title', 'price', 'name'])
    	  ->values(['Shoes', 10.99, 'FooBar'])
      	  ->commit();
          
Method 5:
	$query = new Sql\InsertInto('Product');
	$query->values('email', 'Foo@bar.om')
    	  ->commit();
        
 Method 6:
	$query = new Sql\InsertInto('Product');
	$query->json('
        {
            "title": "Shoes",
            "price": 10.99,
            "name": "FooBar"
        }'
    )->commit(); 
 	
    //Or as a file
	$query = new Sql\InsertInto('Product');
	$query->json('myjsonDataFile.json', true)
    	  ->commit();  
 
 Method 7:
    $query = new Sql\InsertInto('Shop');
    $query->column('fname', 'lname', 'price')
           ->Select('count')
           ->from('Product')
	  	   ->where('name', 'Bar')
	  	   ->orWhere('title', 'Shoes')
		   ->fallBack()
		   ->commit();
          

Method 8:
    $query = new Sql\InsertInto('Shop');
    $query->column('fname', 'lname', 'price')
          ->Query('SELECT `title`, `price`, `name` FROM Product WHERE `name` = :wname')
		  ->setToken([':wname' => 'Foo'])
		  ->fallBack()
          ->commit();
 
 SELECT
 ----------------------------------------------------------------------------------------------------
 Method 1:
    $query = new Sql\Select('title, price, name');
    $query->from('Product')->commit();
    
    
Method 2:
    $query = new Sql\Select(['title', 'price', 'name']);
    $query->from('Product')->commit();
   
Method 3:
	$query = new Sql\Select('title, price, name');
	$query->from('Product')
	  	  ->where('name', 'Bar')
          ->commit();
 
Method 4:
	$query = new Sql\Select('count');
	$query->from('Product')->commit();


Method 5:
	$query = new Sql\Select(['title', 'price', 'count:name']);
	$query->from('Product')->commit();        
           
Method 6:
	$query = new Sql\Select('title, price, name');
	$query->from('Product')
	  	  ->where(['name' => 'Bar', 'title' => 'Shoes'])
          ->commit();
          
    //which is  Equivalent to this:
    
    $query = new Sql\Select('title, price, name');
	$query->from('Product')
	  	  ->where('name', 'Bar')
	  	  ->andWhere('title', 'Shoes')
          ->commit();  
      
    //WHILE
    
    $query = new Sql\Select('title, price, name');
	$query->from('Product')
	  	  ->where(['name' => 'Bar', 'title' => 'Shoes'], 'OR') //default 'AND' form multi array element
          ->commit();
          
    //which is  Equivalent to this:
    
    $query = new Sql\Select('title, price, name');
	$query->from('Product')
	  	  ->where('name', 'Bar')
	  	  ->orWhere('title', 'Shoes')
          ->commit();      

Method 7:
    $query = new Sql\Select('title, price, name');
    $query->from('Product')
          ->where('name', 'Bar')
          ->andWhere('price', 10.99)
          ->orWhere('title', 'Shoes')
          ->order('id')
          ->limit(4)
          ->commit();
     
     
    $query = new Sql\Select();
    $query->from('Product')
          ->where('price')
          ->between(100, 220)
          ->commit()
          
     $query = new Sql\Select();
     $query->from('Product')
	      ->where('price')
	      ->between(100, 220)
	      ->order('abs:key')
          ->commit();
	      
	 
	$query = new Sql\Select();
    $query->from('Product')
    	  ->where('price')
    	  ->between(100, 220)
    	  ->order('count')
          ->commit();
Method 8:

    class myObject
    {
        public $title = null;
        public $price = null;
        public $name = null;
        
        function __construct() {
        	var_dump($this->title, $this->price, $this->name);
        }
    }
    
    $query = new Sql\Select('title, price, name', 'myObject'); // class:myObject
    $query->from('Product')->commit();
    
    //Function map
    
    function myFuncMap($title, $price, $name)
    {
        var_dump($title, $price, $name);
    }
    
    $query = new Sql\Select('title, price, name');
    $query->from('Product')->map('function:myFuncMap')->commit(); 
    
    //not advisable
    
    class user
    {
        public $title = null;
        public $price = null;
        public $name = null;
        
        public function __construct()
        {	
            $query = new Sql\Select('title, price, name', $this);
            $query->from('Product')->commit();
        }
        
    }
    $user = new user;    
 
 
 
     
 Method 9:
    $query = new Sql\Select('*');
	$query->from('Product')
	      ->where(['id' => 10, 'group' => 5], 'AND', '>,<')
          ->commit();
          
          
 Method 10:
    $query = new Sql\Select('*');
	$query->distinct()
    	  ->from('Product')
          ->commit();    
          
  Method 11:
  
  	//does not use global db or autofix
    $query = new Sql\Select();
    $query->from('Product')
          ->where('id', 1)
          ->union()
          ->select()
          ->from('Shop')
          ->where('id', 1)
          ->unionAll()
          ->select()
          ->from('Product')
          ->where('id', 3)
          ->commit()
                   
          
 Method 14:          
    $query = new Sql\Select('table.name as t1, table.user as:t2');
    $query->from('Product')
    	  ->where('price')
    	  ->between(100, 220)
          ->commit();
   
   
   //note method 15,16 and 17 must have DB::setTable('Product');      
  Method 15:          
	Sql\Select::find_name('foo')->commit();
   
   
  Method 16:          
   	 Sql\Select::find_or_name('foo', 'Bar')->commit();
     
     
 Method 17:          
   	Sql\Select::find_or_name('foo', 'Bar')->count();     
   
   
Method 18:          
	class myObject
	{
		public $title = null;
		public $price = null;
		public $name = null;
		
		function __construct() {
			var_dump($this->title, $this->price, $this->name);
		}
	}
	
	Select::find_name('foo')->map('myObject')->commit();   
 
 
 
 Method 19:          
	$query = new Sql\Select();
	query->from('Product')
    	 ->where('price', 10.99)
    	 ->group('id')
         ->toString();  
		 
		 
	$query = new Sql\Select('title);
	query->from('Product')
    	 ->where('price', 10.99)
    	 ->group('id', 'floor:price*2) //or floor(price*2)
         ->toString();  
      
                        
 UPDATE
 ----------------------------------------------------------------------------------------------------
 Method 1:
    $query = new Sql\Update('Product');
    $query->set('name', 'Foo')
    	  ->where('title', 'Shoes')
          ->commit();

Method 2:
	$query = new Sql\Update('Product');
    $query->set(array(
    	'name' => 'Foo', 
        'price' => 10.88
    ))->where('title', 'Shoes')
     ->commit();
     
Method 3:
	$query = new Sql\Update('Product');
    $query->set(array(
    	'name' => 'Foo', 
        'price' => 10.88
    ))->where('name', 'Bar')
      ->andWhere('price', 10.99)
      ->orWhere('title', 'Shoes')
      ->commit();
      
 Method 4:
    $query = new Sql\Update('Product');
    $query->where('title', 'Shoes');
    
    $query->title = 'Boots';
    $query->price = 10.55;
    $query->name = 'Foo';
    
    $query->commit();
    
    //Or--
    
    $query = new Sql\Update('Product');
    $query->title = 'Boots';
    $query->price = 10.55;
    $query->name = 'Foo';
    
    $query->where('title', 'Shoes')
    	  ->commit();
    
 Method 1:
    $query = new Sql\Update('Product');
    $query->json('{
        "title": "Shoes",
        "price": 10.99,
        "name": "FooBar"
    }')->where('title', 'Shoes')
       ->commit(); 
 	
    //Or as a file
	$query = new Sql\Update('Product');
	$query->json('myjsonDataFile.json', true)
    	  ->where('title', 'Shoes')
          ->commit();    
    
    
    
 DELETE
 ----------------------------------------------------------------------------------------------------
 Method 1:
    $query = new Sql\deleteFrom('Product');
    $query->where('title', 'Shoes')
    	  ->orWhere('name', 'FooBar')
          ->commit();    

 QUERY
 ----------------------------------------------------------------------------------------------------
 Method 1:
    $query = new Sql\Query('SELECT `title`, `price`, `name` FROM Product WHERE `name` = \'Foo\'');
    $query->commit('fetchAll(PDO::FETCH_ASSOC)');
    
   
   
     
Method 3:
    $query = new Sql\Query('SELECT `title`, `price`, `name` FROM Product WHERE `id` = 1');
    //(stm) returns active query object (fast)
    $query->commit('stm')->fetchAll(PDO::FETCH_OBJ);
    
    //or
    
    $query = new Sql\Query('SELECT `title`, `price`, `name` FROM Product WHERE `id` = 1');
    $query->commit('fetchAll(PDO::FETCH_OBJ)');
    
    //Note $query->commit('fetchAll(PDO::FETCH_OBJ)', true); 
    	will pervent 'PDO::FETCH_OBJ' from being casted as constant hence leaving u with somethin like:
    	$query->commit('fetchAll('PDO::FETCH_OBJ')');
    
    
Method 4:
    $query = new Sql\Query('INSERT INTO Product (`title`, `price`, `name`) VALUES (\'Shoes\', 10.99, \'FooBar\')');
    //(pdo) returns active connection object
    $query->commit('pdo')->lastInsertId(); //returns last inserted id (fast)
    //or
    	$query->commit('lastInsertId())');
    
     
 Method 2:
    $query = new Sql\Query('SELECT `title`, `price`, `name` FROM Product WHERE `name` = :wname');
	$query->col_and_val = array(':wname' => 'Foo');
    $query->commit('fetchAll(PDO::FETCH_OBJ)');
    
    //or
    
    $query = new Sql\Query('SELECT `title`, `price`, `name` FROM Product WHERE `name` = :wname');
	$query->setToken(array(':wname' => 'Foo'));
    $query->commit('fetchAll(PDO::FETCH_OBJ)');
    
    //can pass anything that is not constant as a 2nd arg
    //eg $query->commit('someMethod', arrar(data));
  

    
    
FIND
 ----------------------------------------------------------------------------------------------------
 Method 1:
    //find all in product where name == Foo
    Sql\Find::Product_name('Foo')->commit()
    
    //find price in product where name == Foo
    Sql\Find::Product_name('Foo', 'price')->commit()
    
    //count  all columns in product where name == Foo
    Sql\Find::Product_name('Foo', 'count')->commit()
    
    //count name columns in product where name == Foo
    Sql\Find::Product_name('Foo', 'count:name')->commit() // 'COUNT(name)'
	//while
	Sql\Find::Product_name('Foo')->count(); //counts the total number or result (can call every other select method)